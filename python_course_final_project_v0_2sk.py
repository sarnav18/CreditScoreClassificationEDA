# -*- coding: utf-8 -*-
"""Python_Course_Final_Project_v0_2SK.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ANAvdpA2JB1twDFHMjHRFLgAJijptQjx

## Downloading Dataset and Importing libraries
"""

pip install opendatasets

import opendatasets as od
import pandas as pd
import numpy as np
pd.options.display.max_columns = None
np.set_printoptions(threshold=np.inf)
import plotly.express as px

od.download("https://www.kaggle.com/datasets/parisrohan/credit-score-classification?select=test.csv")

df=pd.read_csv('credit-score-classification/train.csv')

df.shape

df.describe()

df.info()

"""The above information indicates that the following columns have null values:

Occupation, Monthly_Inhand_Salary, Type_of_Loan, Num_of_Delayed_Payment, Changed_Credit_Limit, Num_Credit_Inquiries, Credit_Mix, Credit_History_Age, Amount_invested_monthly, Payment_Behaviour,Monthly_Balance

# Data Cleaning

### Converting Month to Numeric Column
Using a dictionary to convert Janurary to 1, February to 2, ... so on.
"""

months_key={'January':1,
       'February':2,
        'March':3,
        'April':4,
        'May':5,
        'June':6,
        'July':7,
        'August':8,
        'September':9,
        'October':10,
        'November':11,
        'December':12
       }
df1=df.replace({"Month": months_key})

df1.head()

"""### Cleaning Age **Column**"""

df1['Age'] = df1['Age'].str.replace('_','')
df1['Age'] = pd.to_numeric(df1['Age'])
df1.head()

"""### Removing SSN Column"""

df1.drop(columns=['SSN'],inplace=True)

df1

"""### Occupation Column"""

df1['Occupation'].unique()

"""We need to replace '______' with null"""

df1['Occupation']=df1['Occupation'].replace({'_______': np.nan })

"""### Annual Income"""

df1['Annual_Income'] = df1['Annual_Income'].str.replace('_','')
df1['Annual_Income'] = pd.to_numeric(df1['Annual_Income'])

"""### Number of Delayed Payments"""

# df1['Changed_Credit_Limit']
df1['Num_of_Delayed_Payment'] = df1['Num_of_Delayed_Payment'].str.replace('_','')
df1['Num_of_Delayed_Payment'] = pd.to_numeric(df1['Num_of_Delayed_Payment'])

"""### Changed credit Limit"""

# df1['Changed_Credit_Limit']
df1['Changed_Credit_Limit'] = df1['Changed_Credit_Limit'].replace('_',np.nan)
df1['Changed_Credit_Limit'] = pd.to_numeric(df1['Changed_Credit_Limit'])

"""### Credit_Mix - One Hot Encoding Categorical Column"""

df1['Credit_Mix'].unique()

df1['Credit_Mix'] = df1['Credit_Mix'].replace('_',np.nan)

df1['Credit_Mix'] = df1['Credit_Mix'].str.replace('_','Unknown')

# credit_mix_dummies = pd.get_dummies(df1['Credit_Mix'])
# credit_mix_dummies = credit_mix_dummies.drop('Unknown',axis = 1)
# credit_mix_dummies.head()

# df1 = df1.drop('Credit_Mix',axis = 1)
# df1 = df1.join(credit_mix_dummies)

df1.describe()
#Credit_Utilization_Ratio	Credit_History_Age	Payment_of_Min_Amount	Total_EMI_per_month	Amount_invested_monthly	Payment_Behaviour	Monthly_Balance	Credit_Score	Bad	Good	Standard

df1['Credit_History_Age']=df1['Credit_History_Age'].fillna('0 Years and 0 Months')

Credit_history_age1=df1['Credit_History_Age'].str.split(' Years and ', expand=True)

Credit_history_age2=Credit_history_age1[1].str.split(' ', expand=True)

Credit_history_age1[[0]]

"""### Credit History"""

Credit_history_age3= Credit_history_age1[[0]].merge(Credit_history_age2[[0]],  how='left',left_index=True, right_index=True)
# Credit_history_age3= Credit_history_age1[[0]].join(Credit_history_age2[[0]])

df1['Credit_history_age_sanitized']=(Credit_history_age3['0_x']).astype(int)+(Credit_history_age3['0_y']).astype(int)/12

"""### Outstanding Debt"""

df1['Outstanding_Debt'] = df1['Outstanding_Debt'].str.replace('_','')
df1['Outstanding_Debt'] = pd.to_numeric(df1['Outstanding_Debt'])

"""### Payment_of_Min_Amount"""

df1['Payment_of_Min_Amount'].unique()

"""### Amount_invested_monthly"""

df1['Amount_invested_monthly'] = df1['Amount_invested_monthly'].str.replace('_','')
df1['Amount_invested_monthly'] = pd.to_numeric(df1['Amount_invested_monthly'])

"""### Payment_Behaviour"""

df['Payment_Behaviour'].unique()

df1['Payment_Behaviour'] = df1['Payment_Behaviour'].replace('!@9#%8',np.nan)

"""In monthly balance -333333333333333333333333333 is an outlier, we need to sanitize the column and remove such elemets"""

df1['Monthly_Balance'] = df1['Monthly_Balance'].str.replace('-333333333333333333333333333','')
df1['Monthly_Balance'] = df1['Monthly_Balance'].str.replace('_','')
df1['Monthly_Balance'] = pd.to_numeric(df1['Monthly_Balance'])

"""### Num_of_Loan"""

df1["Num_of_Loan"]=df1["Num_of_Loan"].str.replace('_','')
df1["Num_of_Loan"]=pd.to_numeric(df1["Num_of_Loan"])

"""### Given below is a clean dataframe"""

df1.head()

"""# Null Value Analysis

As identified earlier, the null values needs to be handled for any further processing. They can be handled in multiple ways
"""

#Filling the columns with 0 (Assuming there were no delayed payments, changes in credit limits, credit inquiries, amount invested as 0 if values are missing)
df1[['Num_of_Delayed_Payment','Delay_from_due_date','Changed_Credit_Limit','Num_Credit_Inquiries','Amount_invested_monthly']] = df1[['Num_of_Delayed_Payment','Delay_from_due_date','Changed_Credit_Limit', 'Num_Credit_Inquiries','Amount_invested_monthly']].fillna(0)

#Filling the columns with mean by grouping them within Customer_ID
df1[['Monthly_Inhand_Salary','Monthly_Balance','Credit_history_age_sanitized']] = df1.groupby('Customer_ID')[['Monthly_Inhand_Salary','Monthly_Balance','Credit_history_age_sanitized']].transform(lambda x: x.fillna(x.mean()))
#df1[df1['Monthly_Balance'].isnull()]

#Filling the columns with mode by grouping them within Customer_ID since these are categorical variables
df1['Occupation'] = df1.groupby('Customer_ID')['Occupation'].transform(lambda x: x.fillna(x.mode()[0]))
df1['Credit_Mix'] = df1.groupby('Customer_ID')['Credit_Mix'].transform(lambda x: x.fillna(x.mode()[0]))
df1['Payment_Behaviour'] = df1.groupby('Customer_ID')['Payment_Behaviour'].transform(lambda x: x.fillna(x.mode()[0]))

#Filling 'Type of Loan' with mode by grouping them within Customer ID. However, if the entire values are null within customer id, filling them with mode of column
df1['Type_of_Loan'] = df1.groupby('Customer_ID')['Type_of_Loan'].transform(lambda x: x.fillna(x.mode()[0] if not x.mode().empty else "Not Specified"))

"""Type of loan- data processing"""

df1['Type_of_Loan']=df1['Type_of_Loan'].str.replace(', and ',', ')
df1.set_index('ID', inplace=True)
Loan_Types=df1['Type_of_Loan'].str.split(', ', expand=True)

Loan_Types.head()
ID_loan_type_series= pd.concat([Loan_Types[0], 
           Loan_Types[1], 
           Loan_Types[2], 
           Loan_Types[3], 
           Loan_Types[4], 
           Loan_Types[5], 
           Loan_Types[6], 
           Loan_Types[7], 
           Loan_Types[8]])
ID_loan_type_series.unique()

df1['Auto_Loan']=df1['Type_of_Loan'].str.contains('Auto Loan').astype(int)
df1['Credit_Builder Loan']=df1['Type_of_Loan'].str.contains('Credit-Builder Loan').astype(int)
df1['Personal Loan']=df1['Type_of_Loan'].str.contains('Personal Loan').astype(int)
df1['Payday Loan']=df1['Type_of_Loan'].str.contains('Payday Loan').astype(int)
df1['Mortgage Loan']=df1['Type_of_Loan'].str.contains('Mortgage Loan').astype(int)
df1['Home Equity Loan']=df1['Type_of_Loan'].str.contains('Home Equity Loan').astype(int)
df1['Debt Consolidation Loan']=df1['Type_of_Loan'].str.contains('Debt Consolidation Loan').astype(int)
df1['Student Loan']=df1['Type_of_Loan'].str.contains('Student Loan').astype(int)

df1.head()

"""# Outlier Analysis"""

def mod_outlier(df,column):
    df = df._get_numeric_data()
    
    q1 = df[column].quantile(.25)
    q3 = df[column].quantile(.75)
    
    iqr = q3-q1
    
    lower_bound= q1 - (1.5*iqr)
    upper_bound= q3 + (1.5*iqr)
    
    return({'lowerbound':lower_bound,'upperbound':upper_bound})

#CREATE DICTIONARY FOR LOWER AND UPPER BOUNDS
databounds={}
columnlist=['Age','Num_Bank_Accounts','Num_Credit_Card','Interest_Rate',
            'Num_of_Loan','Delay_from_due_date','Num_of_Delayed_Payment',
            'Num_Credit_Inquiries']

for i in columnlist:
    databounds[i]=mod_outlier(df1,i)


#MANUALLY UPDATING DF
dfage1=df1["Age"]<= 69
dfage2=df1["Age"]> 0

dfbank1=df1["Num_Bank_Accounts"]<= 13
dfbank2=df1["Num_Bank_Accounts"]>= 0

dfcc1=df1["Num_Credit_Card"]<= 11.5
dfcc2=df1["Num_Credit_Card"]>= 0

dfirate1=df1["Interest_Rate"]<= 38
dfirate2=df1["Interest_Rate"]>= 0

dfloan1=df1["Num_of_Loan"]<= 11
dfloan2=df1["Num_of_Loan"]>= 0

dfddate1=df1["Delay_from_due_date"]<= 55
dfddate2=df1["Delay_from_due_date"]>= -17

dfdpay1=df1["Num_of_Delayed_Payment"]<= 33
dfdpay2=df1["Num_of_Delayed_Payment"]>= -7

dfcred1=df1["Num_Credit_Inquiries"]<=18
dfcred2=df1["Num_Credit_Inquiries"]>-6

#create new dataframe
outliersremoved=df1[dfage1&dfage2&dfbank1&dfbank2&dfcc1&dfcc2&dfirate1&dfirate2&dfloan1&dfloan2&dfddate1&dfddate2&dfdpay1&dfdpay2&dfcred1&dfcred2]

"""# Exploratory Data Analysis"""

outliersremoved.describe()

df2=outliersremoved.copy()

df2.head(1)



"""## Correlation"""

#%matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(16, 6))
heatmap = sns.heatmap(df2.corr(), vmin=-1, vmax=1, annot=True)
heatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12)
plt.show()

"""## Volume of customers in different credit Score segments over the 8 months"""

Monthly_volume = df2.groupby(['Month','Credit_Score'])[['Customer_ID']].count().reset_index()
fig = px.bar(Monthly_volume, x="Month", y="Customer_ID", color="Credit_Score",
            color_discrete_sequence=['#00CC96',"#EF553B","#636EFA"]) #title="Long-Form Input"
fig.show()

"""We see that there is a slight decrease in the customers in standard credit score segment"""

col = 'Age'
conditions = [
              df2[col].between(0,18),   # inclusive = True is the default
              df2[col].between(18,35),  
              df2[col].between(35,60),
              # df2[col].between(250,350),
              # df2[col].ge(350)
             ]
choices = ["Minors","Young Adults","Adults"]
    
df2["Age_Group"] = np.select(conditions, choices, default=np.nan)

df2['Age_Group'].unique()

# Age_group=df2.groupby(['Age_Group','Credit_Score'])['Customer_ID'].count().reset_index()
# fig = px.bar(PayBehav, x="Age_Group", y="Customer_ID", color="Credit_Score", barmode = 'stack',
#              color_discrete_sequence=['#00CC96',"#EF553B","#636EFA"])
 
# fig.show()

PayBehav=df2.groupby(['Age_Group','Credit_Score'])['Customer_ID'].count().reset_index()
fig = px.bar(PayBehav, x="Age_Group", y="Customer_ID", color="Credit_Score", barmode = 'stack',
             color_discrete_sequence=['#00CC96',"#EF553B","#636EFA"])
 
fig.show()

"""## Payment Behavior variation over credit score"""

PayBehav=df2.groupby(['Payment_Behaviour','Credit_Score'])['Customer_ID'].count().reset_index()
fig = px.bar(PayBehav, x="Payment_Behaviour", y="Customer_ID", color="Credit_Score", barmode = 'stack',
             color_discrete_sequence=['#00CC96',"#EF553B","#636EFA"])
 
fig.show()

"""## Age"""

fig = px.histogram(df2, x="Age")
fig.show()
fig = px.box(df2, y="Age")
fig.show()

"""## Occupation"""

Monthly_volume = df2.groupby(['Occupation','Credit_Score'])[['Customer_ID']].count().reset_index()
fig = px.bar(Monthly_volume, x="Occupation", y="Customer_ID", color="Credit_Score",color_discrete_sequence=['#00CC96',"#EF553B","#636EFA"]) #title="Long-Form Input"
fig.show()

"""## Annual Income"""

fig = px.histogram(df2, x="Annual_Income")
fig.show()
fig = px.box(df2, y="Annual_Income")
fig.show()

"""### Distribution of Monthly Inhand Salary"""

fig = px.histogram(df2, x="Monthly_Inhand_Salary")
fig.show()
fig = px.box(df2, y="Monthly_Inhand_Salary")
fig.show()

"""### Number of Bank Accounts"""

fig = px.histogram(df2, x="Num_Bank_Accounts")
fig.show()
fig = px.box(df2, y="Num_Bank_Accounts")
fig.show()

df2[0:10]

"""### Credit Utilization Ratio

"""

fig = px.histogram(df2, x="Credit_Utilization_Ratio")
fig.show()
fig = px.box(df2, y="Credit_Utilization_Ratio")
fig.show()

"""### Occupation"""

temp=df2.groupby('Occupation')['Customer_ID'].count().reset_index()
fig = px.pie(temp, values='Customer_ID', names='Occupation')
fig.show()

temp = df2.groupby('Credit_Score')['Customer_ID'].count().reset_index()
fig  = px.pie(temp, values='Customer_ID', names='Credit_Score')
fig.show()

df2["Num_of_Loan"].value_counts()

"""## Changed credit limit

"""

fig=px.histogram(df2,x="Changed_Credit_Limit",labels={'x':'Percentage Changes Credit Limit','y':'Frequency'},nbins=10)
fig.show()

fig = px.box(df2,x="Credit_Score", y="Changed_Credit_Limit",color="Credit_Score",color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"])
fig.show()

"""Customers with poorer score have relatively more variability in their changes 

Not much of a differentiation between Standard and poor ratings based on changes in limit

## Number of Credit Inquiries
"""

fig=px.histogram(df2,x="Num_Credit_Inquiries",labels={'x':'Number of Credit Inquiries','y':'Frequency'},nbins=10)
fig.show()

fig = px.box(df2,x="Credit_Score", y="Num_Credit_Inquiries",color="Credit_Score",color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"])
fig.show()

"""people with lesser inquiries have good score and as inquiries increased, score decreased. Increase in inquiries indicates one is applying for a debt/loan/credit etc., which in turn incraeses the risk.

## Credit Mix
"""

fig=px.histogram(df2,x="Credit_Mix",labels={'x':'Number of Credit Inquiries','y':'Frequency'},
                 nbins=10,color="Credit_Score",barmode='group',color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"])
fig.show()

"""Majority of the customers with a standard mix end up with standard credit score. Customers with bad credit max doesnt always end up with bad credit score and vice versa because of their payment habits

## Outstanding Debt
"""

fig=px.histogram(df2,x="Outstanding_Debt",labels={'x':'Outstanding Debt','y':'# of Customers'},nbins=10)
fig.show()

fig = px.box(df2,x="Credit_Score", y="Outstanding_Debt",color="Credit_Score",color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"])
fig.show()

x = df2[df2['Credit_Score'] == 'Good']['Outstanding_Debt']
y=  df2[df2['Credit_Score'] == 'Standard']['Outstanding_Debt']
z=  df2[df2['Credit_Score'] == 'Poor']['Outstanding_Debt']
sns.kdeplot(x, label='Good', color='green')
sns.kdeplot(y, label='Standard', color='blue')
sns.kdeplot(z, label='Poor', color='red')
plt.legend()

"""Customers with larger debt leading to a poorer score cause of not paying on time. 

Majority of good scored customers maintained less outstanding debts.

## Monthly Balance vs Delay from due date
"""

fig=px.scatter(df2,x="Monthly_Balance",y="Delay_from_due_date",color="Credit_Score",opacity=0.3,color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"],facet_col='Credit_Score')
fig.show()

"""## Effect on credit history age on the basis of delayed payment

"""

fig=px.scatter(df2,x="Delay_from_due_date",y="Credit_history_age_sanitized",color="Credit_Score",opacity=0.5,color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"],facet_col='Credit_Score')
fig.show()

"""## Monthly In-hand salary vs Delay from due date """

fig=px.scatter(df2,x="Monthly_Inhand_Salary",y="Delay_from_due_date",color="Credit_Score",opacity=0.5,color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"],facet_col='Credit_Score')
fig.show()

"""## Monthly Inhand salary vs Outstanding debt"""

fig=px.scatter(df2,x="Monthly_Inhand_Salary",y="Outstanding_Debt",color="Credit_Score",opacity=0.5,color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"],facet_col='Credit_Score')
fig.show()

"""## Monthly In-hand Salary vs Monthly Balance"""

fig=px.scatter(df2,x="Monthly_Inhand_Salary",y="Monthly_Balance",color="Credit_Score",opacity=0.5,color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"],facet_col='Credit_Score')
fig.show()

"""## Monthly in-hand salary vs credit history age"""

fig=px.scatter(df2,x="Monthly_Inhand_Salary",y="Credit_history_age_sanitized",color="Credit_Score",opacity=0.5,color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"],facet_col='Credit_Score')
fig.show()

"""## Delay from due date vs Outstanding Debt"""

fig=px.scatter(df2,x="Delay_from_due_date",y="Outstanding_Debt",color="Credit_Score",opacity=0.5,color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"],facet_col='Credit_Score')
fig.show()


fig = px.scatter(df2,x="Delay_from_due_date",y="Outstanding_Debt",trendline="ols",opacity=0.3,
                 trendline_scope="overall")
fig.show()

"""## Outstanding Debt vs Monthly Balance"""

fig=px.scatter(df2,x="Monthly_Balance",y="Outstanding_Debt",color="Credit_Score",opacity=0.5,color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"],facet_col='Credit_Score')
fig.show()

"""## Outstanding Debt vs Credit History Age"""

fig=px.scatter(df2,x="Credit_history_age_sanitized",y="Outstanding_Debt",color="Credit_Score",opacity=0.5,color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"],facet_col='Credit_Score')
fig.show()

"""## Changed credit limit vs Credit history age

---


"""

fig=px.scatter(df2,x="Changed_Credit_Limit",y="Credit_history_age_sanitized",color="Credit_Score",opacity=0.5,color_discrete_sequence=['#00CC96',"#636EFA","#EF553B"],facet_col='Credit_Score')
fig.show()